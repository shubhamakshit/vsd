name: Rust

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            features: "browser,rustls-tls-webpki-roots"
          - os: ubuntu-latest
            target: aarch64-linux-android
            features: "rustls-tls"
          - os: macos-latest
            target: x86_64-apple-darwin
            features: "native-tls"
          - os: windows-latest
            target: x86_64-pc-windows-msvc

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4

    # Install Rust
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        target: ${{ matrix.target }}

    # Install protoc for Linux (Ubuntu)
    - name: Install Protoc (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y protobuf-compiler build-essential clang wget unzip

    # Install protoc for macOS
    - name: Install Protoc (macOS)
      if: matrix.os == 'macos-latest'
      run: brew install protobuf

    # Install protoc for Windows
    - name: Install Protoc (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install protoc

    # Install Android NDK for Android build
    - name: Install Android NDK
      if: matrix.target == 'aarch64-linux-android'
      run: |
        wget https://dl.google.com/android/repository/android-ndk-r22b-linux-x86_64.zip
        unzip android-ndk-r22b-linux-x86_64.zip
        rm android-ndk-r22b-linux-x86_64.zip
        rustup target add aarch64-linux-android
        printf '\n[target.aarch64-linux-android]\nlinker = "aarch64-linux-android30-clang"\n' >> $HOME/.cargo/config.toml

    # Install osxcross for macOS build on Linux
    - name: Install osxcross
      if: matrix.target == 'x86_64-apple-darwin' && matrix.os == 'ubuntu-latest'
      run: |
        git clone https://github.com/tpoechtrager/osxcross
        curl -L https://github.com/joseluisq/macosx-sdks/releases/download/13.1/MacOSX13.1.sdk.tar.xz -o osxcross/tarballs/MacOSX13.1.sdk.tar.xz
        cd osxcross
        ./tools/get_dependencies.sh
        sudo apt install llvm
        UNATTENDED=1 SDK_VERSION=13.1 ./build.sh
        ENABLE_COMPILER_RT_INSTALL=1 ./build_compiler_rt.sh
        rustup target add x86_64-apple-darwin
        printf '\n[target.x86_64-apple-darwin]\nlinker = "x86_64-apple-darwin21.4-clang"\n' >> $HOME/.cargo/config.toml

    # Install musl toolchain for Linux with MUSL
    - name: Install musl toolchain
      if: matrix.target == 'x86_64-unknown-linux-musl'
      run: |
        git clone https://github.com/richfelker/musl-cross-make --depth 1
        cd musl-cross-make
        TARGET=x86_64-linux-musl make install
        find musl-cross-make/output/**/*/libstdc++.so* -exec rm {} \;
        rustup target add x86_64-unknown-linux-musl
        printf '\n[target.x86_64-unknown-linux-musl]\nlinker = "x86_64-linux-musl-gcc"\n' >> $HOME/.cargo/config.toml

    # Build the project
    - name: Build
      run: |
        cargo build -p vsd --release --target ${{ matrix.target }} --no-default-features --features "${{ matrix.features }}"

    # Run tests
    - name: Run tests
      run: cargo test --verbose
